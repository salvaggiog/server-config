# Define the port where the API gateway server would be running
server:
  port: 8080

# The OAuth2 server definition that would be used to send the authorization requests to
authserver:
    hostname: localhost
    port: 8899
    contextPath: userauth

# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that
# Spring cloud security would need to secure the api gateway before it can route the
# requests using zuul
zuul:
  host:
    socket-timeout-millis: 10000
    connect-timeout-millis: 10000
  routes:
    system-admin:
      path: /system-admin/**
      serviceId: system-admin
      stripPrefix: false
    cms:
      path: /cms/**
      serviceId: cms
      stripPrefix: false
    calendar:
      path: /calendar/**
      serviceId: calendar
      stripPrefix: false
    dms:
      path: /dms/**
      serviceId: dms
      stripPrefix: false
    elearning:
      path: /elearning/**
      serviceId: elearning
      stripPrefix: false
    email:
      path: /email/**
      serviceId: email
      stripPrefix: false
    logs:
      path: /logs/**
      serviceId: logs
      stripPrefix: false
    reports:
      path: /reports/**
      serviceId: reports
      stripPrefix: false
    repository:
      path: /repository/**
      serviceId: repository
      stripPrefix: false
    rss:
      path: /rss/**
      serviceId: rss
      stripPrefix: false
    scheduler:
      path: /scheduler/**
      serviceId: scheduler
      stripPrefix: false
    script-builder:
      path: /script-builder/**
      serviceId: script-builder
      stripPrefix: false
    sms:
      path: /sms/**
      serviceId: sms
      stripPrefix: false
    social:
      path: /social/**
      serviceId: social
      stripPrefix: false
    support:
      path: /support/**
      serviceId: support
      stripPrefix: false
    survey:
      path: /survey/**
      serviceId: survey
      stripPrefix: false
    system-admin:
      path: /system-admin/**
      serviceId: system-admin
      stripPrefix: false
    tasks:
      path: /tasks/**
      serviceId: tasks
      stripPrefix: false
    ticket:
      path: /ticket/**
      serviceId: ticket
      stripPrefix: false
    traslator:
      path: /traslator/**
      serviceId: traslator
      stripPrefix: false
    xml:
      path: /xml/**
      serviceId: xml
      stripPrefix: false
    common:
      path: /common/**
      serviceId: common
      stripPrefix: false
    auth-server:
      path: /userauth/**
      stripPrefix: false
      serviceId: auth-server

hystrix:
    command:
        default:
            execution:
                isolation:
                    thread:
                        timeoutInMilliseconds: 10000

# Define the Eureka server that handles service registration
eureka:
  instance:
      preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
spring:
  oauth2:
    sso:
      home:
        secure: false
        path: /common/**,/cms/**, /userauth/**, /userauth/oauth/**, **/swagger-ui.html
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: clientapp
      clientSecret: 123456a
# The userInfoUri is used to authenticate the user so that SSO token can be relayed forward. It needs to either be
# a physical endpoint (defined using userInfoUri) OR can be bypassed if you use a JSON web token (JWT) that stores
# information about grants and authentication in the token itself.

# Note that the "/user" endpoint needs to provide the principle of the logged in user (/me endpoint)
    resource:
      userInfoUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/me
      preferTokenInfo: false

# Datasource and JPA configuration to be used for using the same tokenstore as the authorization server for
# the defined resource server. Note that there can't be 2 different root nodes, so datasource falls under the "spring" node.
  datasource:
    url: jdbc:mysql://localhost:3307/core_dlg_platform
    username: root
    password: pgi1979
    driver-class: com.mysql.jdbc.Driver

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    show-sql: true
    hibernate:
      ddl-auto: none
