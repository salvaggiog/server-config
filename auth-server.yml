# We need to setup different context root for the auth server so that we can store separate
# cookies for both the API gateway as well as the OAuth2 authorization server.
server:
  port: 8899
  contextPath: /userauth 

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  cloud:
      config:
         discovery:
               enabled: true
                
security:
  user:
    password: password      

# Datasource and JPA configuration to be used for storing the OAuth authorization details 
# and token store
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/core_indiana_oauth2
    username: root
    password: pgi1979
    driver-class: com.mysql.jdbc.Driver
    testOnBorrow: true
    validationQuery: SELECT 1
    
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
    show-sql: true
    entitymanager-packagesToScan: com.microservice.mysql
    hibernate:
      ddl-auto: update
      useUnicode: true
      characterEncoding: utf8_bin
      charSet: UTF-8
      autoReconnect: true
      autoReconnectForPools: true
      c3p0:
         acquire_increment: 3
         max_size: 200
         min_size: 3
         maxIdleTime: 120
         unreturned_connection_timeout: 150
         timeout: 180
         maxConnectionAge: 120
         idle_test_period: 10
         maxStatements: 0

    
mongo: 
  database: dominus
  host: localhost
  password:
  port: 27017
  username:

---


spring:
  profiles: docker
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get 
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
      
